<?php

namespace app\controllers;
use \app\models\Profile;
use \app\models\User;
use \app\models\ClassRoom;
use \app\models\Student;
use \app\models\Subject;
use \app\models\Absent;
use \app\models\TypeActivity;
use \app\models\Activity;
use \app\models\Exam;
use \app\models\Question;
use \app\models\Answer;
use Yii;
use yii\web\UploadedFile;
class ApiController extends \yii\web\Controller
{
    public $enableCsrfValidation = false;

    public function beforeAction($action)
    {
        $this->layout = "blank";
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        if (\Yii::$app->request->get('lang')) {
            \Yii::$app->language = \Yii::$app->request->get('lang');
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionApitoken()
    {
        \Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $token = \Yii::$app->getSecurity()->generatePasswordHash(\Yii::$app->params['key_token']);
        return $token;
    }

    public function actionSubmitsignup(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $profile=new Profile();
        $user=new User();
        $profile->first_name=Yii::$app->request->post('first_name');
        $profile->last_name=Yii::$app->request->post('last_name');
        $profile->phone=Yii::$app->request->post('phone');
        $profile->email=Yii::$app->request->post('email');
        if($profile->save()){
            $user->profile_id=$profile->id;
            $user->username=Yii::$app->request->post('username');
            $user->password=Yii::$app->getSecurity()->generatePasswordHash(Yii::$app->request->post('password'));
            $user->save();
        }
        $result=['profile'=>$profile,'user'=>$user];
        return $result;
    }
    public function actionLogin()
    {
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        $user=User::find()->where(['username'=>Yii::$app->request->post('username'),'status'=>1])->one();
        if($user)
        {
            if (Yii::$app->getSecurity()->validatePassword(Yii::$app->request->post('password'), $user->password)) {
                $result=$user;
            }
        }
        
        return $result;
    }

    public function actionAddclassroom(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $cl=new ClassRoom();
        $result=[];
        $cl->class_room_name=Yii::$app->request->post('class_room_name');
        $cl->teacher_id=Yii::$app->request->post('teacher_id');
        if($cl->save()){
            $result=$cl;
        }
        return $result;
    }
    public function actionEditclassroom(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $cl=ClassRoom::find()->where(['teacher_id'=>Yii::$app->request->post('teacher_id'),'id'=>Yii::$app->request->post('id')])->one();
        $result=[];
        $cl->class_room_name=Yii::$app->request->post('class_room_name');
        $cl->teacher_id=Yii::$app->request->post('teacher_id');
        if($cl->save()){
            $result=$cl;
        }
        return $result;
    }
    public function actionListclassroom(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $cl=ClassRoom::find()->where(['teacher_id'=>Yii::$app->request->post('teacher_id')])->all();
        return $cl;
    }

    public function actionDeleteclassroom(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $cl=ClassRoom::find()->where(['teacher_id'=>Yii::$app->request->post('teacher_id'),'id'=>Yii::$app->request->post('id')])->one();
        $result=[];
        if($cl->delete()){
            $result=[true];
        }
        return $result;
    }

    public function actionListstudent(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $st=Student::find()->where(['class_room_id'=>Yii::$app->request->post('class_room_id')])->all();
        return $st;
    }
    public function actionAddstudent(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $st=new Student();
        $result=[];
        $st->class_room_id=Yii::$app->request->post('class_room_id');
        $st->student_code=Yii::$app->request->post('student_code');
        $st->first_name=Yii::$app->request->post('first_name');
        $st->last_name=Yii::$app->request->post('last_name');
        if($st->save()){
            $result=$st;
        }
        return $result;
    }
    public function actionEditstudent(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $st=Student::find()->where(['id'=>Yii::$app->request->post('id')])->one();
        $result=[];
        $st->class_room_id=Yii::$app->request->post('class_room_id');
        $st->student_code=Yii::$app->request->post('student_code');
        $st->first_name=Yii::$app->request->post('first_name');
        $st->last_name=Yii::$app->request->post('last_name');
        if($st->save()){
            $result=$st;
        }
        return $result;
    }
    public function actionDeletestudent(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $st=Student::find()->where(['id'=>Yii::$app->request->post('id')])->one();
        $result=[];
        if($st->delete()){
            $result=[true];
        }
        $this->CountStudent(Yii::$app->request->post('class_room_id'));
        return $result;
    }
    public function actionImportcsv(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }

        $upload = UploadedFile::getInstanceByName("upfile");
        if (empty($upload)) {
            return "Must upload at least 1 file in upfile form-data POST";
        }else{
            $realFileName = rand(). time() . '.' . $upload->extension;
            $path = \Yii::$app->basePath . '/web/file/' . $realFileName;
            if ($upload->saveAs($path)) {
                $data = \moonland\phpexcel\Excel::import($path);
                foreach($data as $list){
                    $st=Student::find()->where(['student_code'=>(string)$list['student_code'],'class_room_id'=>Yii::$app->request->post('class_room_id')])->one();
                    if(empty($st))
                    {
                        $st=new Student();
                    }
                    $st->class_room_id=Yii::$app->request->post('class_room_id');
                    $st->student_code=(string)$list['student_code'];
                    $st->first_name=$list['first_name'];
                    $st->last_name=$list['last_name'];
                    $st->save();
                }
                unlink($path);
                $this->CountStudent(Yii::$app->request->post('class_room_id'));
            }
        }
        return $st;
    }
    public function CountStudent($class_room_id){
        $student=Student::find()->where(['class_room_id'=>$class_room_id])->all();
        $cl=ClassRoom::find()->where(['id'=>$class_room_id])->one();
        $cl->count_student=count($student);
        $cl->save();
    }

    public function actionAddsubject(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $sj=new Subject();
        $result=[];
        $sj->class_room_id=Yii::$app->request->post('class_room_id');
        $sj->teacher_id=Yii::$app->request->post('teacher_id');
        $sj->title=Yii::$app->request->post('title');
        $sj->score_class_room=Yii::$app->request->post('score_class_room');
        $sj->score_activity=Yii::$app->request->post('score_activity');
        $sj->score_exam=Yii::$app->request->post('score_exam');
        if($sj->save()){
            $result=$sj;
        }
        return $result;
    }

    public function actionEditsubject(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $sj=Subject::find()->where(['id'=>Yii::$app->request->post('id')])->one();
        $result=[];
        $sj->class_room_id=Yii::$app->request->post('class_room_id');
        $sj->teacher_id=Yii::$app->request->post('teacher_id');
        $sj->title=Yii::$app->request->post('title');
        $sj->score_class_room=Yii::$app->request->post('score_class_room');
        $sj->score_activity=Yii::$app->request->post('score_activity');
        $sj->score_exam=Yii::$app->request->post('score_exam');
        if($sj->save()){
            $result=$sj;
        }
        return $result;
    }

    public function actionListsubject(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $sj=Subject::find()
        ->joinWith('classRoom')
        ->where(['subject.teacher_id'=>Yii::$app->request->post('teacher_id')])
       ->asArray()
        ->all();
        return $sj;
    }

    public function actionListsubjectbyclassroom(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $sj=Subject::find()
        ->where(['teacher_id'=>Yii::$app->request->post('teacher_id')])
        ->andWhere(['class_room_id'=>Yii::$app->request->post('class_room_id')])
        ->all();
        return $sj;
    }
    
    public function actionDeletesubject(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $sj=Subject::find()->where(['id'=>Yii::$app->request->post('id')])->one();
        $result=[];
        if($sj->delete()){
            $result=[true];
        }
        return $result;
    }

    public function actionAbsentgeneratedate(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        foreach(Yii::$app->request->post('students') as $student)
        {
            $as=new Absent();
            $as->subject_id=Yii::$app->request->post('subject_id');
            $as->student_id=$student['id'];
            $as->date=date('Y-m-d H:i:s');
            $as->absent=1;
            if($as->save()){
                $result=$as;
            }
        }
        return $result;
    }
    public function actionAbsentcheckgeneratedate(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        foreach(Yii::$app->request->post('students') as $student)
        {
            $as=Absent::find()
            ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
            ->andWhere(['student_id'=>$student['id']])
            ->andWhere(['>','date',date('Y-m-d H:i:s', strtotime('-2 hour'))])
            ->andWhere(['<','date',date('Y-m-d H:i:s')])
            ->one();
            if($as)
            {
                $result[]=$as;
            }
        }
        return $result;
    }

    public function actionDeleteabsentgeneratedate(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        foreach(Yii::$app->request->post('students') as $student)
        {
            $as=Absent::find()
            ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
            ->andWhere(['student_id'=>$student['id']])
            ->andWhere(['>','date',date('Y-m-d H:i:s', strtotime('-2 hour'))])
            ->andWhere(['<','date',date('Y-m-d H:i:s')])
            ->one();
            $as->delete();
        }
        return $result;
    }

    public function actionEditabsent(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        $as=Absent::find()
        ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->andWhere(['student_id'=>Yii::$app->request->post('student_id')])
        ->andWhere(['>','date',date('Y-m-d H:i:s', strtotime('-2 hour'))])
        ->andWhere(['<','date',date('Y-m-d H:i:s')])
        ->one();
        if($as)
        {
            $as->absent=Yii::$app->request->post('absent');
            if(!$as->save())
            {
                print_r($as->getErrors());exit;
            }

            $result=$as;
        }
        return $result;
    }

    public function actionEditabsentreason(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        $as=Absent::find()
        ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->andWhere(['student_id'=>Yii::$app->request->post('student_id')])
        ->andWhere(['>','date',date('Y-m-d H:i:s', strtotime('-2 hour'))])
        ->andWhere(['<','date',date('Y-m-d H:i:s')])
        ->one();
        if($as)
        {
            $as->reason=Yii::$app->request->post('reason');
            if(!$as->save())
            {
                print_r($as->getErrors());exit;
            }

            $result=$as;
        }
        return $result;
    }
    public function actionListhistoryabsent(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $lhas=Absent::find()
        ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->andWhere(['student_id'=>Yii::$app->request->post('student_id')])
        ->all();
        return $lhas;
    }

    public function actionListactivity(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $act=TypeActivity::find()
        ->all();
        return $act;
    }

    public function actionActivitygeneratescore(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        foreach(Yii::$app->request->post('students') as $student)
        {
            $act=new Activity();
            $act->subject_id=Yii::$app->request->post('subject_id');
            $act->type_activity_id=Yii::$app->request->post('activity_id');
            $act->student_id=$student['id'];
            $act->date=date('Y-m-d H:i:s');
            $act->score=1;
            if($act->save()){
                $result=$act;
            }
        }
        return $result;
    }
    public function actionActivitycheckgeneratescore(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        foreach(Yii::$app->request->post('students') as $student)
        {
            $act=Activity::find()
            ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
            ->andWhere(['student_id'=>$student['id']])
            ->andWhere(['type_activity_id'=>Yii::$app->request->post('activity_id')])
            ->andWhere(['>','date',date('Y-m-d H:i:s', strtotime('-1 days'))])
            ->andWhere(['<','date',date('Y-m-d H:i:s')])
            ->one();
            if($act)
            {
                $result[]=$act;
            }
        }
        return $result;
    }
    public function actionEditnotsendhomwork(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        $act=Activity::find()
        ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->andWhere(['student_id'=>Yii::$app->request->post('student_id')])
        ->andWhere(['type_activity_id'=>Yii::$app->request->post('activity_id')])
        ->andWhere(['>','date',date('Y-m-d H:i:s', strtotime('-1 days'))])
        ->andWhere(['<','date',date('Y-m-d H:i:s')])
        ->one();
        if($act)
        {
            $act->send=Yii::$app->request->post('send');
            $act->score=Yii::$app->request->post('score');
            if(!$act->save())
            {
                print_r($act->getErrors());exit;
            }

            $result=$act;
        }
        return $result;
    }

    public function actionEditinpuscore(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        $act=Activity::find()
        ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->andWhere(['student_id'=>Yii::$app->request->post('student_id')])
        ->andWhere(['type_activity_id'=>Yii::$app->request->post('activity_id')])
        ->andWhere(['>','date',date('Y-m-d H:i:s', strtotime('-1 days'))])
        ->andWhere(['<','date',date('Y-m-d H:i:s')])
        ->one();
        if($act)
        {
            $act->score=Yii::$app->request->post('score');
            if(!$act->save())
            {
                print_r($act->getErrors());exit;
            }

            $result=$act;
        }
        return $result;
    }

    public function actionInputqascore(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $act=new Activity();
        $act->subject_id=Yii::$app->request->post('subject_id');
        $act->student_id=Yii::$app->request->post('student_id');
        $act->score=Yii::$app->request->post('score');
        $act->type_activity_id=Yii::$app->request->post('activity_id');
        $act->date=date('Y-m-d H:i:s');
        if(!$act->save())
        {
            print_r($act->getErrors());exit;
        }
        return $act;
    }

    public function actionDeletegeneratescore(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        foreach(Yii::$app->request->post('students') as $student)
        {
            $act=Activity::find()
            ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
            ->andWhere(['student_id'=>$student['id']])
            ->andWhere(['type_activity_id'=>Yii::$app->request->post('activity_id')])
            ->andWhere(['>','date',date('Y-m-d H:i:s', strtotime('-1 days'))])
            ->andWhere(['<','date',date('Y-m-d H:i:s')])
            ->one();
            $act->delete();
        }
        return $result;
    }

    public function actionListhistoryactivity(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $lhact=Activity::find()
        ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->andWhere(['student_id'=>Yii::$app->request->post('student_id')])
        ->andWhere(['type_activity_id'=>Yii::$app->request->post('activity_id')])
        ->all();
        return $lhact;
    }
    public function actionDeleteqascore(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $del=Activity::find()
        ->where(['id'=>Yii::$app->request->post('delete_id')])
        ->one();
        $del->delete();
        return $del;
    }

    public function actionCreateexam(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $exam=new Exam;
        $exam->subject_id=Yii::$app->request->post('subject_id');
        $exam->start_time=Yii::$app->request->post('start_date');
        $exam->end_time=Yii::$app->request->post('end_date');
        $exam->time_answer=Yii::$app->request->post('time_answer');
        $exam->url_answer=Yii::$app->request->post('url_answer');
        $exam->save();
        return $exam;
    }
    public function actionListexam(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $exam=Exam::find()
        ->joinWith(['subject','subject.classRoom'])
        ->where(['subject.teacher_id'=>Yii::$app->request->post('teacher_id')])
        ->orderBy('exam.id DESC')
        ->asArray()
        ->all();
        return $exam;
    }
    public function actionEditexam(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $exam=Exam::find()->where(['id'=>Yii::$app->request->post('exam_id')])->one();
        $exam->subject_id=Yii::$app->request->post('subject_id');
        $exam->start_time=Yii::$app->request->post('start_date');
        $exam->end_time=Yii::$app->request->post('end_date');
        $exam->time_answer=Yii::$app->request->post('time_answer');
        $exam->url_answer=Yii::$app->request->post('url_answer');
        $exam->save();
        return $exam;
    }
    public function actionDeleteexam(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $exam=Exam::find()->where(['id'=>Yii::$app->request->post('exam_id')])->one();
        $exam->delete();
        return $exam;
    }


    public function actionListquestion(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $question=Question::find()
        ->joinWith('answers')
        ->where(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->andWhere(['exam_id'=>Yii::$app->request->post('exam_id')])
        ->asArray()
        ->orderBy('id DESC')
        ->all();
        return $question;
    }

    public function actionCreatquestion(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $question=new Question();
        $question->subject_id=Yii::$app->request->post('subject_id');
        $question->exam_id=Yii::$app->request->post('exam_id');
        $question->question=Yii::$app->request->post('question');
        if($question->save()){
            if(Yii::$app->request->post('answer1'))
            {
                $answer=new Answer();
                $answer->question_id=$question->id;
                $answer->answer=Yii::$app->request->post('answer1');
                if(Yii::$app->request->post('answer_correct')==1)
                {
                    $answer->answer_true=1;
                }
                $answer->save();
            }
            if(Yii::$app->request->post('answer2'))
            {
                $answer=new Answer();
                $answer->question_id=$question->id;
                $answer->answer=Yii::$app->request->post('answer2');
                if(Yii::$app->request->post('answer_correct')==2)
                {
                    $answer->answer_true=1;
                }
                $answer->save();
            }
            if(Yii::$app->request->post('answer3'))
            {
                $answer=new Answer();
                $answer->question_id=$question->id;
                $answer->answer=Yii::$app->request->post('answer3');
                if(Yii::$app->request->post('answer_correct')==3)
                {
                    $answer->answer_true=1;
                }
                $answer->save();
            }
            if(Yii::$app->request->post('answer4'))
            {
                $answer=new Answer();
                $answer->question_id=$question->id;
                $answer->answer=Yii::$app->request->post('answer4');
                if(Yii::$app->request->post('answer_correct')==4)
                {
                    $answer->answer_true=1;
                }
                $answer->save();
            }
        }
        return $question;
    }

    public function actionEditquestion(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $question=Question::find()->where(['id'=>Yii::$app->request->post('question_id')])->one();
        $question->subject_id=Yii::$app->request->post('subject_id');
        $question->exam_id=Yii::$app->request->post('exam_id');
        $question->question=Yii::$app->request->post('question');
        if($question->save()){
            $i=0;
            foreach(Yii::$app->request->post('answers') as $ans)
            {
                $i++;
                $answer=Answer::find()->where(['id'=>$ans['id']])->one();
                if(Yii::$app->request->post('answer1') && $i==1)
                {
                    $answer->question_id=$question->id;
                    $answer->answer=Yii::$app->request->post('answer1');
                    if(Yii::$app->request->post('answer_correct')==1)
                    {
                        $answer->answer_true=1;
                    }else{
                        $answer->answer_true=0;
                    }
                    $answer->save();
                }
                elseif(Yii::$app->request->post('answer2') && $i==2)
                {
                    $answer->question_id=$question->id;
                    $answer->answer=Yii::$app->request->post('answer2');
                    if(Yii::$app->request->post('answer_correct')==2)
                    {
                        $answer->answer_true=1;
                    }else{
                        $answer->answer_true=0;
                    }
                    $answer->save();
                }
                elseif(Yii::$app->request->post('answer3') && $i==3)
                {
                    $answer->question_id=$question->id;
                    $answer->answer=Yii::$app->request->post('answer3');
                    if(Yii::$app->request->post('answer_correct')==3)
                    {
                        $answer->answer_true=1;
                    }else{
                        $answer->answer_true=0;
                    }
                    $answer->save();
                }
                elseif(Yii::$app->request->post('answer4') && $i==4)
                {
                    $answer->question_id=$question->id;
                    $answer->answer=Yii::$app->request->post('answer4');
                    if(Yii::$app->request->post('answer_correct')==4)
                    {
                        $answer->answer_true=1;
                    }else{
                        $answer->answer_true=0;
                    }
                    $answer->save();
                }
        }
        }
        return $question;
    }

    public function actionDeletequestion(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $qt=Question::find()->where(['id'=>Yii::$app->request->post('question_id')])->one();
        $qt->delete();
        return $qt;
    }

    public function actionDuplicateexam(){
        /*$token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }*/
        $exam=Exam::find()->where(['id'=>Yii::$app->request->post('exam_id')])->one();
        if($exam)
        {
            $new_exam=new Exam();
            $new_exam->subject_id=$exam->subject_id;
            $new_exam->start_time=date('Y-m-d',strtotime(' +1 day'))." ".date('H:i:s',strtotime($exam->start_time));
            $new_exam->end_time=date('Y-m-d',strtotime(' +1 day'))." ".date('H:i:s',strtotime($exam->end_time));
            $new_exam->time_answer=$exam->time_answer;
            $new_exam->url_answer=Yii::$app->request->post('url_answer');
            if($new_exam->save()){
                $questions=Question::find()->where(['exam_id'=>$exam->id])->all();
                foreach($questions as $qt){
                    $qt_new=new Question();
                    $qt_new->subject_id=$qt->subject_id;
                    $qt_new->exam_id=$new_exam->id;
                    $qt_new->question=$qt->question;
                    if($qt_new->save()){
                        $answers=Answer::find()->where(['question_id'=>$qt->id])->all();
                        foreach($answers as $ans){
                            $ans_new=new Answer();
                            $ans_new->question_id=$qt_new->id;
                            $ans_new->answer=$ans->answer;
                            $ans_new->answer_true=$ans->answer_true;
                            if(!$ans_new->save()){
                                print_r($ans_new->getErrors());exit;
                            }
                        }
                    }
                }
            }

        }
        
        return $exam;
    }

    public function actionSumscoreclassroom(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        $subject=Subject::find()->where(['id'=>Yii::$app->request->post('subject_id')])->one();
        foreach(Yii::$app->request->post('students') as $student)
        {
        $countDateAbsent=Absent::find()
        ->where(['student_id'=>$student['id']])
        ->andWhere(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->count();

        $sumscoreclassroom=Absent::find()
        ->where(['student_id'=>$student['id']])
        ->andWhere(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->andWhere(['absent'=>0])
        ->andWhere(['reason'=>0])
        ->count();
        $result[$student['id']]=round($subject->score_class_room-(($subject->score_class_room*$sumscoreclassroom)/$countDateAbsent),0);
        }
        return $result;
    }

    public function actionSumscoreactivity(){
        $token = $this->checkToken(\Yii::$app->request->post('tokenID'));
        if ($token['id'] == false) {
            return $token;
        }
        $result=[];
        $subject=Subject::find()->where(['id'=>Yii::$app->request->post('subject_id')])->one();
        foreach(Yii::$app->request->post('students') as $student)
        {
        $sumScoreActivity=Activity::find()
        ->where(['student_id'=>$student['id']])
        ->andWhere(['subject_id'=>Yii::$app->request->post('subject_id')])
        ->sum('score');
        if(empty($sumScoreActivity))
        {
            $sumScoreActivity=0;
        }
        $result[$student['id']]=$sumScoreActivity;
        }
        return $result;
    }


    public function checkToken($tokenID)
    {
        if ($tokenID) {
            $token = \Yii::$app->getSecurity()->validatePassword(\Yii::$app->params['key_token'], $tokenID);
            if ($token == false) {
                return ['id' => false, 'msg_wrong' => 'Validate token wrong.!'];
            } else {
                return ['id' => true, 'msg_wrong' => 'Validate token success'];
            }
        } else {
            return ['id' => false, 'msg_wrong' => 'No token access.!'];
        }
    }
    public function actionIndex()
    {
        return $this->render('index');
    }

}
